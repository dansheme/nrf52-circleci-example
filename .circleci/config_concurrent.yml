version: 2
jobs:
    build:
        docker:
            - image: circleci/python
        environment:
            ARM_NONE_EABI: /home/circleci/gcc-arm-none-eabi-7-2018-q2-update
        steps:
            - checkout
            - restore_cache:
                key: arm-none-eabi-
            - run:
                working_directory: /home/circleci/
                name: install arm-nonoe-eabi
                command: |
                    if [ ! -d gcc-arm-none-eabi-7-2018-q2-update ]; then
                        wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz
                        tar xvf gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz
                        rm gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz
                    fi
            - save_cache:
                key: arm-none-eabi-{{ checksum "/home/circleci/gcc-arm-none-eabi-7-2018-q2-update/bin/arm-none-eabi-gcc" }}
                paths:
                    - /home/circleci/gcc-arm-none-eabi-7-2018-q2-update
            - run:
                name: build
                command: make -C src/pca10040/blank/armgcc/
            - run:
                name: build-2 (ATWINC_ENABLED)
                command: CFLAGS+=-DATWINC_ENABLED make -C src/pca10040/blank/armgcc/ OUTPUT_DIRECTORY=_build_2
            - run:
                name: build-unit-test
                command: make -C test/unity/pca10040/blank/armgcc/ 
            - run:
                name: setup
                command: |
                    virtualenv --python=python2 venv
                    . venv/bin/activate
                    pip install -r requirements.txt
            - persist_to_workspace:
                root: .
                paths:
                    - src/pca10040/blank/armgcc/_build
                    - src/pca10040/blank/armgcc/_build_2
                    - test/unity/pca10040/blank/armgcc/_build
                    - venv
    test-1-ut:
        docker:
            - image: circleci/python
        steps:
            - checkout
            - attach_workspace:
                at: .
            - run:
                name: config
                command: |
                    mkdir ~/.jumper/
                    echo $VLAB_USER_CONFIG > ~/.jumper/config.json
            - run:
                name: test-1-ut (Unit Test)
                command: |
                    . venv/bin/activate
                    jumper run -u --fw test/unity/pca10040/blank/armgcc/_build/nrf52832_xxaa.bin
    test-2-uart:
        docker:
            - image: circleci/python
        steps:
            - checkout
            - attach_workspace:
                at: .
            - run:
                name: config
                command: |
                    mkdir ~/.jumper/
                    echo $VLAB_USER_CONFIG > ~/.jumper/config.json
            - run:
                name: test-2-uart (Black Box Test)
                command: |
                    . venv/bin/activate
                    nosetests --nocapture --rednose -v test/test_runner_2.py
    test-3-aws:
        docker:
            - image: circleci/python
        steps:
            - checkout
            - attach_workspace:
                at: .
            - run:
                name: config
                command: |
                    mkdir ~/.jumper/
                    echo $VLAB_USER_CONFIG > ~/.jumper/config.json
            - run:
                name: setup-keys
                command: |
                    echo -n $TEMP_SENSOR_CERT | base64 -d > tcp-server/my_temp_sensor.cert.pem
                    echo -n $TEMP_SENSOR_KEY | base64 -d > tcp-server/my_temp_sensor.private.key
            - run:
                name: test-3-aws (Integration Test)
                command: |
                    . venv/bin/activate
                    nosetests --nocapture --rednose -v test/test_runner_3.py

workflows:
    version: 2
    atwinc-aws-demo:
        jobs:
            - build:
                context: atwinc-aws-demo
            - test-1-ut:
                context: atwinc-aws-demo
                requires:
                    - build
            - test-2-uart:
                context: atwinc-aws-demo
                requires:
                    - build
            - test-3-aws:
                context: atwinc-aws-demo
                requires:
                    - build
